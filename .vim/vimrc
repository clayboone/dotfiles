" ensure vim-plug is installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" top-level
let mapleader=";"
let g:powerline_pycmd="py3"

" yank/paste between vim sessions with a file
" https://vim.fandom.com/wiki/Copy_and_paste_between_Vim_instances
" (For vim's that were not compiled with '+clipboard'
"  -> if ':echo has('clipboard')' returns 0, you need these next lines)
let g:session_yank_file="~/.vim_yank"
map <silent> <Leader>y :call Session_yank()<CR>
vmap <silent> <Leader>y y:call Session_yank()<CR>
vmap <silent> <Leader>Y Y:call Session_yank()<CR>
nmap <silent> <Leader>p :call Session_paste("p")<CR>
nmap <silent> <Leader>P :call Session_paste("P")<CR>

function Session_yank()
  new
  call setline(1,getregtype())
  put
  silent exec 'wq! ' . g:session_yank_file
  exec 'bdelete ' . g:session_yank_file
endfunction

function Session_paste(command)
  silent exec 'sview ' . g:session_yank_file
  let l:opt=getline(1)
  silent 2,$yank
  if (l:opt == 'v')
    call setreg('"', strpart(@",0,strlen(@")-1), l:opt) " strip trailing endline ?
  else
    call setreg('"', @", l:opt)
  endif
  exec 'bdelete ' . g:session_yank_file
  exec 'normal ' . a:command
endfunction

" strip trailing whitespace on save
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

" set some vars
set laststatus=2
set number
set norelativenumber
set mouse=a
set autoindent
set smartindent
set tabstop=4
set expandtab
set shiftwidth=4
set smarttab
set formatoptions+=rco
set splitbelow
set background=light
set incsearch
set mat=3
set ignorecase
set hlsearch
syntax on

" Always show tabline, but if only 1 tab, it shows buffers.
"set showtabline=2

" colorcolumn
set colorcolumn=80
highlight ColorColumn ctermbg=0

" save view (folding) and position
au BufWinLeave ?* mkview
au BufWinEnter ?* silent loadview

" update with <C-s>
nnoremap <C-S> :update<CR>
inoremap <C-S> <Esc>:update<CR>
vmap <C-S> <Esc>:update<CR>gv

" tabs
map <Leader>t :tabnew<CR>
map <Leader>q :tabclose<CR>
map <C-PageUp> :tabprevious<CR>
map <C-PageDown> :tabnext<CR>
imap <C-PageUp> <ESC>:tabprevious<CR>
imap <C-PageDown> <ESC>:tabnext<CR>

" windows (panes in tabs)
map <C-J> :wincmd j<CR>
map <C-K> :wincmd k<CR>
map <C-H> :wincmd h<CR>
map <C-L> :wincmd l<CR>

" vim-plug plugins
call plug#begin()
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
Plug 'wakatime/vim-wakatime'
Plug 'prettier/vim-prettier', { 'do': 'npm install', 'branch': 'release/1.x' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'easymotion/vim-easymotion'
call plug#end()

" plugin options
"nerdtree
" preserve <C-n> in syntastic
nnoremap <C-n> :NERDTreeToggle<CR>

"nerdcommenter
let g:NERDSpaceDelims = 1
"map the '/' key, why is this underscore?
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>

" easy motion s (see also: vim-sneak)
map s <Plug>(easymotion-s)

"syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" vim-gitgutter
"technically, this is vim's own setting
set updatetime=100

" vim-prettier
let g:prettier#autoformat = 0
"for vim < 8.0, use :Prettier without the 'Async'
autocmd BufWritePre *.js,*.json,*.css,*.scss,*.less,*.graphql PrettierAsync

" rust.vim
let g:rustfmt_autosave = 1
let g:ycm_rust_src_path = '/usr/lib/rustlib/src/rust/src'

" python-mode
let g:pymode_python = 'python3'
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_rope = 1
let g:pymode_rope_complete_on_dot = 0

"Auto-format when saving
autocmd BufWritePost *.py PymodeLintAuto

" `filetype plugin indent on` and `syntax enable` are run by plugend()
